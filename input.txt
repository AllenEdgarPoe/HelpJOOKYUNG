```
class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.image_viewer = QLabel()
        self.image_viewer.setAlignment(Qt.AlignCenter)
        self._pixmap = QPixmap()

        self.run_button = QtWidgets.QPushButton('Run')
        self.run_button.clicked.connect(self.run_thread)

        # Define styles
        self.styles = ['clay', 'alien', 'random']
        self.style_buttons = {style: QtWidgets.QRadioButton(style) for style in self.styles}

        # Layout for buttons
        button_layout = QtWidgets.QHBoxLayout()
        for button in self.style_buttons.values():
            button_layout.addWidget(button)

        button_widget = QtWidgets.QWidget()
        button_widget.setLayout(button_layout)

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.image_viewer)
        layout.addWidget(self.run_button)
        layout.addWidget(button_widget)

        widget = QtWidgets.QWidget()
        widget.setLayout(layout)
        self.setCentralWidget(widget)

        self.cam_viewer = QLabel()
        self.cam_viewer.setAlignment(Qt.AlignCenter)
        self._cam_pixmap = QPixmap()

        self.capture_button = QPushButton("Capture")
        self.capture_button.clicked.connect(self.capture_image)

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.cam_viewer)  # add webcam viewer to layout
        layout.addWidget(self.image_viewer)
        layout.addWidget(self.run_button)
        layout.addWidget(self.capture_button)  # add capture button to layout
        layout.addWidget(button_widget)

        widget = QtWidgets.QWidget()
        widget.setLayout(layout)
        self.setCentralWidget(widget)

        self.thread = QThread()
        self.capture = None
        # start capturing webcam images
        self.start_capture()

    def set_image(self, pixmap: QPixmap):
        self._pixmap = pixmap
        if not self._pixmap.isNull():
            scaled_pixmap = self._pixmap.scaled(self.image_viewer.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation)
            self.image_viewer.setPixmap(scaled_pixmap)

    def run_thread(self, input_path):
        self.image_thread = ImageThread(input_path)
        self.image_thread.imageUpdate.image_signal.connect(self.set_image)

        # Set style for thread
        for style, button in self.style_buttons.items():
            if button.isChecked():
                self.image_thread.setImageStyle(style)
                break

        self.image_thread.start()

    def start_capture(self):
        self.capture = Capture()
        self.capture.change_pixmap_signal.connect(self.set_cam_image)
        self.capture.moveToThread(self.thread)
        self.thread.started.connect(self.capture.run)
        self.thread.start()

    def set_cam_image(self, data):
        self._cam_pixmap.loadFromData(data, "JPG")
        self.update_cam_image()

    def update_cam_image(self):
        if not self._cam_pixmap.isNull():
            scaled_pixmap = self._cam_pixmap.scaled(
                self.cam_viewer.size(),
                Qt.KeepAspectRatio,
                Qt.SmoothTransformation)
            self.cam_viewer.setPixmap(scaled_pixmap)

    def capture_image(self):
        self._pixmap = self._cam_pixmap
        self.update_image()
        cv2.imwrite("test.jpg", cv2.cvtColor(np.array(self._pixmap.toImage()), cv2.COLOR_RGB2BGR))


class Capture(QObject):
    change_pixmap_signal = pyqtSignal(bytes)

    def run(self):
        self.cap = cv2.VideoCapture(0)  # capture from web cam

        while True:
            ret, frame = self.cap.read()
            if ret:
                rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                h, w, ch = rgb_image.shape
                bytes_per_line = ch * w
                convert_to_qt_format = QImage(rgb_image.data, w, h, bytes_per_line, QImage.Format_RGB888)
                p = QPixmap.fromImage(convert_to_qt_format)
                buffer = QBuffer()
                buffer.open(QBuffer.ReadWrite)
                self.change_pixmap_signal.emit(buffer.data().data())
            else:
                print("error!")
```
웹캠 화면이 제대로 안 들어오는거 같아. 이거 좀 고쳐줘

